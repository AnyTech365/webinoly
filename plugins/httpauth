#!/bin/bash

# Http-Authentication Plugin
# Syntax: httpauth <option> <argument>
# Options: -add, -delete, -list, -wp-admin, -whitelist
# Arguments: -raw, -list

source /opt/webinoly/lib/general
check_for_parameters $@
api-events_update has

[[ -n $add || -n $delete || -n $list || -n $whitelist ]] && check_for_nginx -ask

# Check for site argument.
if [[ -n $domain && -a /etc/nginx/sites-available/$domain ]]; then
	authfile="apps.d/.htpasswd-$domain"
elif [[ -n $domain && ! -a /etc/nginx/sites-available/$domain ]]; then
	echo "${red}[ERROR] Domain not found!${end}"
	exit 1
else
	authfile=".htpasswd"
fi


if [[ -n $add ]]; then
	api-events_update ha1
	if [[ $add == true ]]; then
		echo ""
		read -p "${blu}HTTP-Auth User: ${end}" user
		read -p "${blu}HTTP-Auth Password: ${end}" pass
		echo ""
	elif [[ $(echo "${add}" | cut -c-1) == "[" && $(echo "${add}" | rev | cut -c-1) == "]" ]]; then
		userdata=${add:1:-1}
		user=$(echo "${userdata}" | cut -d',' -f 1 -s)
		pass=$(echo "${userdata}" | cut -d',' -f 2 -s)
	else
		user=""
	fi
	
	if ! [[ -n $user && -n $pass && $user =~ ^[^:]+$ && $pass =~ ^[^:]+$ ]]; then
		echo "${red}[ERROR] Please, enter a valid username and password!${end}"
		exit 1
	fi
	
	# Create pass-file if not-exist.
	if [[ ! -a /etc/nginx/$authfile ]]; then
		if [[ -n $domain && ! -d /etc/nginx/apps.d ]]; then
			sudo mkdir -p /etc/nginx/apps.d
			sudo chmod 755 /etc/nginx/apps.d
		fi
		sudo touch /etc/nginx/$authfile
		sudo chmod 644 /etc/nginx/$authfile
		sudo chown -R root:root /etc/nginx/$authfile
	fi
	
	exist=$( grep -E "^${user}:" /etc/nginx/$authfile )
	if [[ -z $exist ]]; then
		sudo sh -c "echo -n '$user:$(openssl passwd -1 $pass)\n' >> /etc/nginx/$authfile"
		echo "${gre}User '$user' has been added successfully!${end}"
	else
		echo "${red}[ERROR] Can not create '$user' user because already exist!${end}"
		exit 1
	fi
	echo ""

	
elif [[ -n $delete ]]; then
	api-events_update ha2
	[[ $delete == true ]] && read -p "${blu}HTTP-Auth User: ${end}" userpurge || userpurge=$delete
	[[ -a /etc/nginx/$authfile ]] && exist=$( grep -F "${userpurge}:" /etc/nginx/$authfile )
	if [[ -z $exist ]]; then
		echo "${red}[ERROR] User '$userpurge' does not exist!${end}"
		exit 1
	fi
	sudo sed -i "/^$userpurge:/d" /etc/nginx/$authfile
	
	# Remove site-auth-file if empty.
	[[ -n $domain && ! -s /etc/nginx/$authfile ]] && sudo rm /etc/nginx/$authfile
	
	echo "${gre}User '$userpurge has been deleted successfully!${end}"

	
elif [[ -n $wp_admin ]]; then
	api-events_update ha3
	[[ $(conf_read nginx) == "true" && -n $domain ]] && iswpadon=$( grep -F "wpcommon.conf;" /etc/nginx/sites-available/$domain )
	if [[ $wp_admin == "on" && -n $domain ]]; then
		if [[ -z $iswpadon ]]; then
			if [[ $(conf_read nginx) == "true" ]]; then
				sudo sed -i '/wpcommon-noauth.conf/c \	include common/wpcommon.conf;' /etc/nginx/sites-available/$domain
				sudo service nginx reload
			fi
			echo "${gre}WordPress Admin HTTP Authentication for ${blu}- $domain -${gre} has been enabled! ${end}"
		else
			echo "${gre}WordPress Admin HTTP Authentication for ${blu}- $domain -${gre} is already enabled! ${end}"
		fi
	
	elif [[ $wp_admin == "off" && -n $domain ]]; then
		if [[ -n $iswpadon ]]; then
			if [[ $(conf_read nginx) == "true" ]]; then
				sudo sed -i '/wpcommon.conf/c \	include common/wpcommon-noauth.conf;' /etc/nginx/sites-available/$domain
				sudo service nginx reload
			fi
			echo "${gre}WordPress Admin HTTP Authentication for ${blu}- $domain -${gre} has been disabled! ${end}"
		else
			echo "${gre}WordPress Admin HTTP Authentication for ${blu}- $domain -${gre} is already disabled! ${end}"
		fi
	elif [[ $wp_admin == "on" ]]; then
		conf_write wp-admin-auth true
		echo "${gre}WordPress Admin HTTP Authentication has been enabled! (global)${end}"
	elif [[ $wp_admin == "off" ]]; then
		conf_write wp-admin-auth purged
		echo "${gre}WordPress Admin HTTP Authentication has been disabled! (global)${end}"
	else
		echo "${red}[ERROR] Invalid value for wp-admin! ${end}"
		exit 1
	fi


elif [[ -n $whitelist ]]; then
	api-events_update ha4
	if [[ -z $purge && -a /etc/nginx/common/acl.conf ]]; then
		if [[ -n $list ]]; then
			[[ $list == "raw" || -n $raw ]] && echo "" || echo "${blu}"
			sudo sed -n 's/^allow //p;' /etc/nginx/common/acl.conf | sudo sed -n 's/;$//p'
			[[ $list == "raw" || -n $raw ]] && echo "" || echo "${end}"
		else
			[[ $whitelist == true ]] && read -p "${blu}IP address to whitelist: ${end}" whitelist
			if [[ $(ip_check $whitelist) == "true" ]]; then
				exist=$( grep -E "^allow $whitelist;$" /etc/nginx/common/acl.conf )
				if [[ -z $exist ]]; then
					sudo sed -i "/deny all;/i \allow ${whitelist};" /etc/nginx/common/acl.conf
					sudo service nginx reload
					echo "${gre}The IP address ${blu}'$whitelist'${gre} was successfully whitelisted!${end}"
				else
					echo "${gre}IP '$whitelist' is already whitelisted!${end}"
					exit 0
				fi
			else	
				echo "${red}[ERROR] Please, enter a valid IP value!${end}"
				exit 1
			fi
		fi
	elif [[ -n $purge && -a /etc/nginx/common/acl.conf ]]; then
		[[ $whitelist == true ]] && read -p "${blu}IP address to remove from whitelist: ${end}" whitelist
		if [[ $(ip_check $whitelist) == "true" ]]; then
			# https://stackoverflow.com/questions/1797906/delete-using-a-different-delimiter-with-sed
			sudo sed -i "\#^allow ${whitelist};#d" /etc/nginx/common/acl.conf
			sudo service nginx reload
			echo "${gre}The IP address ${blu}'$whitelist'${gre} was successfully removed from whitelist!${end}"
		else
			echo "${red}[ERROR] Please, enter a valid IP value!${end}"
			exit 1
		fi
	else
		echo "${red}[ERROR] Nginx file not found!${end}"
		exit 1
	fi

	
elif [[ -n $list ]]; then
	echo ""
	if [[ -a /etc/nginx/$authfile ]]; then
		cat /etc/nginx/$authfile | 
		{
		while read line
		do
			# Show only the user_name part, cut encrypted password string
			[[ $list == "raw" || -n $raw ]] && echo "$line" | cut -f 1 -d ':' || echo "${gre}+ $(echo $line | cut -f 1 -d ':') ${end}"
			nonemptylist=true
		done
		}
	fi
	[[ -z $nonemptylist && -z $raw && $list != "raw" ]] && echo "${blu}[Empty] No users were found!${end}"
	echo ""


else
	echo "${red}[ERROR] Please enter a valid option!${end}"
	exit 1
fi

api-events_update hae
